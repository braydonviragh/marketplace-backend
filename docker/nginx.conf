user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Basic settings
    server_tokens off;
    
    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Global CORS handling for preflight requests
    map $request_method $cors_method {
        OPTIONS 1;
        default 0;
    }

    # Define server for port 8080 (default) or PORT env var
    server {
        # Listen on port 8080 by default (Railway will map the external port)
        listen 8080 default_server;
        server_name _;
        root /var/www/public;
        index index.php index.html;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        # Add global CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

        charset utf-8;

        # Debug: log all access attempts for troubleshooting
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log debug;

        # Global CORS preflight handling
        if ($cors_method) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        # Direct PHP health check - no Laravel dependency
        location = /healthz.php {
            fastcgi_pass 127.0.0.1:9000;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            
            # Ultra low timeouts for health checks
            fastcgi_connect_timeout 1s;
            fastcgi_send_timeout 2s;
            fastcgi_read_timeout 2s;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            
            # Log for troubleshooting
            access_log /var/log/nginx/healthz_access.log;
            error_log /var/log/nginx/healthz_error.log notice;
        }

        # RAILWAY HEALTH CHECK - Static file first approach (bypass PHP)
        location = /api/health {
            # Try serving static file first, then fall back to PHP
            try_files /api/health @fallback_health;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            add_header 'Content-Type' 'text/plain' always;
            
            # Log health checks for debugging
            access_log /var/log/nginx/api_health_access.log;
            error_log /var/log/nginx/api_health_error.log notice;
        }
        
        # Fallback health checks to PHP
        location @fallback_health {
            fastcgi_pass 127.0.0.1:9000;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root/index.php;
            fastcgi_param SCRIPT_NAME /index.php;
            fastcgi_param REQUEST_URI /api/health;
            
            # Ultra low timeouts for health checks
            fastcgi_connect_timeout 1s;
            fastcgi_send_timeout 2s;
            fastcgi_read_timeout 2s;
        }

        # Root health check (static file first, then PHP)
        location = /health {
            try_files $uri /index.php?$query_string;
            access_log /var/log/nginx/health_check.log;
        }

        # API routes - log api access separately
        location /api {
            try_files $uri $uri/ /index.php?$query_string;
            access_log /var/log/nginx/api_access.log;
        }

        # Main location to handle the application
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        # Prevent access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Favicon and robots handling
        location = /favicon.ico { 
            access_log off; 
            log_not_found off; 
        }
        location = /robots.txt  { 
            access_log off; 
            log_not_found off; 
        }

        # Error pages
        error_page 404 /index.php;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/www/public;
        }

        # PHP-FPM Configuration
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param HTTP_PROXY "";
            fastcgi_intercept_errors on;
            fastcgi_connect_timeout 300;
            fastcgi_send_timeout 300;
            fastcgi_read_timeout 300;
            fastcgi_buffer_size 16k;
            fastcgi_buffers 4 16k;
            
            # Removed problematic add_header directive from here
        }
    }
} 